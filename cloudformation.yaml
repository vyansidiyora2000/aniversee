AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an S3 bucket, Cognito User Pool, Lambda functions, DynamoDB tables, and API Gateway

Resources:

# -------------------------------------------------------------S3----------------------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: b00968316-aniverse-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - 'ETag'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldFiles
            Status: Enabled
            ExpirationInDays: 30

# -------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------Cognito---------------------------------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: b00968316-aniverse
      AutoVerifiedAttributes:
        - email 
      UsernameAttributes:
        - email
      EmailVerificationMessage: 'Please verify your email address for my-app: {####}'
      EmailVerificationSubject: 'Verify your email for my-app'

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: aniverse
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: aniverse-client
      UserPoolId: !Ref CognitoUserPool

# ---------------------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------Lambda----------------------------------------------------------------
  AddUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: addUser
      Handler: index.handler
      Runtime: nodejs20.x
      Role: arn:aws:iam::992382755227:role/LabRole
      Code:
        S3Bucket: b0096831096
        S3Key: add_user.zip

  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: getUser
      Handler: index.handler
      Runtime: nodejs20.x
      Role: arn:aws:iam::992382755227:role/LabRole
      Code:
        S3Bucket: b0096831096
        S3Key: get_user.zip

  PostVideoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: postVideo
      Handler: index.handler
      Runtime: nodejs20.x
      Role: arn:aws:iam::992382755227:role/LabRole
      Code:
        S3Bucket: b0096831096
        S3Key: post_videos.zip

  GetVideoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: getVideo
      Handler: index.handler
      Runtime: nodejs20.x
      Role: arn:aws:iam::992382755227:role/LabRole
      Code:
        S3Bucket: b0096831096
        S3Key: get_videos.zip

  SearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: searchVideo
      Handler: index.handler
      Runtime: nodejs20.x
      Role: arn:aws:iam::992382755227:role/LabRole
      Code:
        S3Bucket: b0096831096
        S3Key: search_video.zip

# ---------------------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------DynamoDB--------------------------------------------------------------
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: b00968316-User
      AttributeDefinitions:   
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  VideoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: b00968316-Video
      AttributeDefinitions:
        - AttributeName: vId
          AttributeType: S
      KeySchema:
        - AttributeName: vId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
 
# ---------------------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------CloudFront-------------------------------------------------------------
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Origin Access Identity for CloudFront

  CloudFrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: GrantCloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref S3Bucket, '/*']]

# -----------------------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------------------ApiGateway-------------------------------------------------------------
 
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AniVerse
      Description: API Gateway for my application
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  # -------------- /User -------------------

  ApiGatewayUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "user"
      RestApiId: !Ref ApiGateway
    DependsOn: ApiGateway

  ApiGatewayUserCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayUserResource
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  ApiGatewayUserAddMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json: $input.json('$')
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt AddUserFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  
  # ------------------------------------------

  # -----------------/user/details--------------

  ApiGatewayUserDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayUserResource
      PathPart: "details"
      RestApiId: !Ref ApiGateway

  ApiGatewayUserDeatilsCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayUserDetailsResource
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  ApiGatewayUserDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayUserDetailsResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt GetUserFunction.Arn
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  
  # ---------------------------------------------

  # -------------------/videos-------------------

  ApiGatewayVideoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "videos"
      RestApiId: !Ref ApiGateway

  ApiGatewayVideoCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayVideoResource
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"
  
  ApiGatewayGetVideo:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayVideoResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt GetVideoFunction.Arn
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  # --------------/videos/upload-------------------

  ApiGatewayVideoUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayVideoResource
      PathPart: "upload"
      RestApiId: !Ref ApiGateway

  ApiGatewayVideoUploadCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayVideoUploadResource
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  ApiGatewayPostVideo:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayVideoUploadResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt PostVideoFunction.Arn
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  # ---------------------------------------------------

  # -------------------/videos/search-------------------

  ApiGatewaySearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayVideoResource
      PathPart: "search"
      RestApiId: !Ref ApiGateway

  ApiGatewaySearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewaySearchResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt SearchFunction.Arn
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": $input.json('$')
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  ApiGatewayVideoSearchCors:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewaySearchResource
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"
  
  # ---------------------------------------------------
 
  # --------------Invoke Lambda Permissions----------------

  LambdaPermissionAddUser:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AddUserFunction.Arn
      Principal: apigateway.amazonaws.com

  LambdaPermissionGetUser:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetUserFunction.Arn
      Principal: apigateway.amazonaws.com
    
  LambdaPermissionPostVideo:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostVideoFunction.Arn
      Principal: apigateway.amazonaws.com
  
  LambdaPermissionGetVideo:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetVideoFunction.Arn
      Principal: apigateway.amazonaws.com
  
  LambdaPermissionSearch:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SearchFunction.Arn
      Principal: apigateway.amazonaws.com
  
  # -------------------------------------------------------

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayUserAddMethod
      - ApiGatewayUserDetailsMethod
      - ApiGatewayPostVideo
      - ApiGatewayGetVideo
      - ApiGatewaySearchMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
      DeploymentId: !Ref ApiGatewayDeployment

# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------EC2---------------------------------------------------------------
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-051f8a213df8bc089
      InstanceType: t2.micro
      KeyName: aniverse
      SecurityGroups:
        - Ref: AniverseSecurityGroup
      Tags:
        - Key: Name
          Value: aniverse
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir /home/aniverse/
          sudo su
          sudo yum update
          sudo yum install git -y 
          cd /home/aniverse
          git clone https://github.com/sneh2102/AniVerse.git
          cd AniVerse
          rm -f .env
          echo "REACT_APP_API_GATEWAY='https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'" > .env
          echo "REACT_APP_USER_POOL_ID=${CognitoUserPool}" >> .env
          echo "REACT_APP_CLIENT_ID=${CognitoUserPoolClient}" >> .env
          echo "REACT_APP_CLOUDFRONT='https://${CloudFrontDistribution.DomainName}'" >> .env
          yum install nodejs -y
          yum npm install -y
          sudo npm install 
          sudo npm run start&
    DependsOn: CloudFrontDistribution

  AniverseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and port 3000 access from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# -----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------Backup---------------------------------------------------------------
  DynamoDBTableBackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: aniverse-backup-vault

  DynamoDBTableBackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref DynamoDBTableBackupPlan
      BackupSelection:
        SelectionName: aniVerse-DB-backup-selection
        IamRoleArn: arn:aws:iam::992382755227:role/LabRole
        Resources:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/b00968316-Video
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/b00968316-User

  DynamoDBTableBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: aniVerse-DB-backup-plan
        BackupPlanRule:
          - RuleName: aniVerse-DB-backup-rule
            ScheduleExpression: cron(0 0 * * ? *) 
            TargetBackupVault: !Ref DynamoDBTableBackupVault
            StartWindowMinutes: 60 
            CompletionWindowMinutes: 10080 
            Lifecycle:
              DeleteAfterDays: 30 
            

# ------------------------------------------------------------------------------------------------------------------------
          
Outputs:

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket

  CloudFrontDistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Description: Domain name for the Cognito User Pool
    Value: !Ref CognitoUserPoolDomain

  CognitoUserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient

  EC2InstancePublicIp:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  
  